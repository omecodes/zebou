// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package zebou

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NodesClient is the client API for Nodes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodesClient interface {
	Sync(ctx context.Context, opts ...grpc.CallOption) (Nodes_SyncClient, error)
}

type nodesClient struct {
	cc grpc.ClientConnInterface
}

func NewNodesClient(cc grpc.ClientConnInterface) NodesClient {
	return &nodesClient{cc}
}

func (c *nodesClient) Sync(ctx context.Context, opts ...grpc.CallOption) (Nodes_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Nodes_serviceDesc.Streams[0], "/Nodes/sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodesSyncClient{stream}
	return x, nil
}

type Nodes_SyncClient interface {
	Send(*ZeMsg) error
	Recv() (*ZeMsg, error)
	grpc.ClientStream
}

type nodesSyncClient struct {
	grpc.ClientStream
}

func (x *nodesSyncClient) Send(m *ZeMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodesSyncClient) Recv() (*ZeMsg, error) {
	m := new(ZeMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodesServer is the server API for Nodes service.
// All implementations must embed UnimplementedNodesServer
// for forward compatibility
type NodesServer interface {
	Sync(Nodes_SyncServer) error
	mustEmbedUnimplementedNodesServer()
}

// UnimplementedNodesServer must be embedded to have forward compatible implementations.
type UnimplementedNodesServer struct {
}

func (UnimplementedNodesServer) Sync(Nodes_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedNodesServer) mustEmbedUnimplementedNodesServer() {}

// UnsafeNodesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodesServer will
// result in compilation errors.
type UnsafeNodesServer interface {
	mustEmbedUnimplementedNodesServer()
}

func RegisterNodesServer(s grpc.ServiceRegistrar, srv NodesServer) {
	s.RegisterService(&_Nodes_serviceDesc, srv)
}

func _Nodes_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodesServer).Sync(&nodesSyncServer{stream})
}

type Nodes_SyncServer interface {
	Send(*ZeMsg) error
	Recv() (*ZeMsg, error)
	grpc.ServerStream
}

type nodesSyncServer struct {
	grpc.ServerStream
}

func (x *nodesSyncServer) Send(m *ZeMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodesSyncServer) Recv() (*ZeMsg, error) {
	m := new(ZeMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Nodes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Nodes",
	HandlerType: (*NodesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sync",
			Handler:       _Nodes_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "zebou.proto",
}
